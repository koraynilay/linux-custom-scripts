#!/bin/zsh
#old name: "last_added_ncmpcpp_getfattr"
mf="/I/Raccolte/music_files.txt"
mft="/I/Raccolte/music_files.txt.tmp"
md="/I/Raccolte/Musica"
plf="$HOME/.mpd/playlists/lastctime.m3u"
plf_nn=$(basename $plf)
plf_name=${plf_nn%.*}
plf_tmp="/tmp/plf_toadd.m3u"
plf_tmp2="/tmp/plf.m3u"
IFS=$'\n'

ff="$mf.fd"
ffn="$ff.new"

resume=0
update=0
dry=0
debug=0
for ar in $@;do
	if [[ ! $ar =~ ^-.* ]];then
		arg=$ar
		break
	fi
done
while getopts uhnd opt;do #r #per -r (resume)
	case $opt in
		#r)resume=1;;
		u)update=1;;
		n)dry=1;;
		d)debug=1;;
		h)	echo -ne "Usage: $0 [opt]\n";
			#echo -ne "  -n\t\tdon't be verbose (dont't print processed files)\n";
			#echo -ne "  -r \tresume after populating playlist\n";
			echo -ne "  -u \tupdate '$mf'\n";
			exit 0;;
		?)exit 2;;
	esac
done
#if [ "$arg" = "play" ];then
#	update=1
#fi

mpc update >/dev/null

reorder_album(){
	s=0 # could also use bash substitions, but I prefer this
	s=$(mpc playlist -f "%album% - %title% - %artist%" | nl | grep -P $@ | tail -1 | cut -f1 | sed 's/\s//g')
	s1=$(mpc playlist -f "%album% - %title% - %artist%" | nl | grep -P $@ | head -1 | cut -f1 | sed 's/\s//g')
	if [ $s -eq 0 ];then
		echo "error, needs the position"
	else
		for a in {$((s-$((s-s1))))..$s};do
			mpc move --verbose $s $a # ma --verbose non va
		done
	fi

}

data_cmd=0
if [[ "$(lsblk -o FSTYPE $(df -T "$md" | awk '/\/dev\//{print $1}') | tail -1)" == "ntfs" ]];then
	data_cmd=1
fi
cd "$md"
#if [ $update -eq 1 ];then
#	echo update
#	for a in `find .`;do
#		gr=$(grep -F "$a" "$mf")
#		#echo $gr
#		if [ -n "$gr" ];then
#			continue
#		else
#			if [[ "${a##*.}" == "nfo" ]];then
#				continue
#			fi
#			echo "adding $a to $mf"
#			if [ $data_cmd -eq 1 ];then
#				data=$(date -d @$(getfattr --only-values -n system.ntfs_crtime_be "$a" 2>/dev/null | perl -MPOSIX -0777 -ne '$t = unpack("Q>"); print $t/10000000-11644473600') +%Y-%m-%d_%H-%M-%S)
#			else
#				data=$(date -d "$(stat "$a" | nl | awk '$1 == 8 {print $3,$4}')" +%Y-%m-%d_%H-%M-%S)
#			fi
#			echo "$data \"$a\"" >> $mf
#		fi
#	done
#fi
if [ $update -eq 1 ];then
	echo update
	fd \
		-e aac \
		-e aiff \
		-e alac \
		-e ape \
		-e flac \
		-e m4a \
		-e mp3 \
		-e ogg \
		-e oga \
		-e mogg \
		-e opus \
		-e vox \
		-e wav \
		-e wma \
		-e wv \
	| sort > $ffn
	to_add=$(comm -13 "$ff" "$ffn")
	echo #blank line to separate

	echo to_add:
	echo $to_add
	echo > $mft

	echo #blank line to separate

	echo -ne "music_files.txt:\t"
	echo -E "$mf"
	echo -ne "music_files.txt tmp:\t"
	echo -E "$mft"
	for a in `echo $to_add`;do
		if [ $debug -eq 1 ];then
			echo -ne "cur\t"
			echo -E "$a"
		fi
		gr=$(grep -F "$a" "$mf")
		#echo $gr
		if [ -n "$gr" ];then
			continue
		else
			if [[ "${a##*.}" == "nfo" ]];then
				continue
			fi
			echo -ne "mf adding\t"
			echo -E "$a"
			#echo -ne "\tto\t"
			#echo -E "$mf"
			if [ $data_cmd -eq 1 ];then
				data=$(date -d @$(getfattr --only-values -n system.ntfs_crtime_be "$a" 2>/dev/null | perl -MPOSIX -0777 -ne '$t = unpack("Q>"); print $t/10000000-11644473600') +%Y-%m-%d_%H-%M-%S)
			else
				#data=$(date -d "$(stat "$a" | nl | awk '$1 == 8 {print $3,$4}')" +%Y-%m-%d_%H-%M-%S)
				data=$(date -d "$(stat -c '%w' "$a")" +%Y-%m-%d_%H-%M-%S)
			fi
			if [ $dry -eq 0 ];then
				echo "$data \"$a\"" >> $mf
			fi
			echo "$data \"$a\"" >> $mft
		fi
	done

	echo #blank line to separate

	echo -ne "playlist:\t"
	echo -E "$plf"
	echo -ne "playlist tmp:\t"
	echo -E "$plf_tmp"
	for csong in `cat $mft | sort -nr | awk '!/^#/' | tr -d '"' | awk '/\.mp3$|\.wav$|\.flac$|\.m4a$/ {print substr($0, 21)}'`;do
		if [ -z "$(grep -F "$csong" "$plf")" ];then
			echo -ne "plf added\t"
			echo -E " ${csong}"
			if [ $dry -eq 0 ];then
				echo "$csong" >> "$plf_tmp"
			fi
			if [ $debug -eq 1 ];then
				echo -ne "echo\t\t"
				echo -E "'$csong' >> '$plf_tmp'"
			fi
		fi
	done

	if [ -f "$plf_tmp" ];then
		if [ $debug -eq 1 ];then
			echo #blank line to separate
			echo -ne "playlist tmp2:\t"
			echo -E "$plf_tmp2"

			echo -ne "tac\t"
			echo -E "'$plf' > '$plf_tmp2'"
			echo -ne "tac\t"
			echo -E "'$plf_tmp' >> '$plf_tmp2'"
			echo -ne "tac\t"
			echo -E "'$plf_tmp2' > '$plf'"
		fi
		if [ $dry -eq 0 ];then
			tac "$plf" > "$plf_tmp2"
			tac "$plf_tmp" >> "$plf_tmp2"
			tac "$plf_tmp2" > "$plf"
			rm "$plf_tmp" "$plf_tmp2"
		fi
		echo
		echo -E "playlist $plf updated"
	fi

	if [ $dry -eq 0 ];then
		echo #blank line to separate
		if [ $debug -eq 1 ];then
			echo "mv -v '$ffn' '$ff'"
		fi
		mv -v "$ffn" "$ff"
	fi

	if [ $debug -eq 1 ];then
		echo -ne "\n"
		echo -E "arg:$arg"
	fi
	if [ "$arg" = "play" ];then
		printf "'play' specified: doing mpc clear;load;play\n"
		if [ $dry -eq 0 ];then
			mpc clear >/dev/null
			mpc load "$(basename "${plf%.*}")"
			mpc play >/dev/null
		fi
	fi
fi

#printf "csong\n"
#echo $arg
#if [ "$arg" = "add" ];then
#	n=0
#	for csong in `cat $mf | sort -nr | awk '!/^#/' | cut -c 1-2 --complement | tr -d '"' | awk '/\.mp3$|\.wav$|\.flac$|\.m4a$/ {print substr($0, 21)}'`;do
#		#echo $csong
#		is_there=`mpc -f '%file%' playlist | grep -F "$csong"`
#		#echo $is_there
#		if [ -z "$is_there" ];then
#			mpc add "$csong"
#			let n++
#			mpc move `mpc status | perl -ne 'print "$1\n" if /#[0-9]+\/([0-9]+)/'` $n
#			printf "added: $csong\n"
#		fi
#	done
#	exit 0
#fi

#if [ "$arg" = "play" ];then
#	if [ $dry -eq 0 ];then
#		if [ $update -eq 0 ];then
#			mpc clear >/dev/null
#			mpc load "$plf_name"
#			echo "playing"
#			mpc play >/dev/null
#			exit 0
#		fi
#	fi
#	#printf "play\n"
#	if [ $dry -eq 0 ];then
#		mpc clear >/dev/null
#	fi
#	pwd
#	n=0
#	for csong in `cat $mf | sort -nr | awk '!/^#/' | cut -c 1-2 --complement | tr -d '"' | awk '/\.mp3$|\.wav$|\.flac$|\.m4a$/ {print substr($0, index($0,$2))}'`;do
#		if [ $dry -eq 0 ];then
#			mpc add "$csong" >/dev/null
#		fi
#		#grep -F "$csong" "$plf" --color=always
#		if [ -z "$(grep -F "$csong" "$plf")" ];then
#			echo ${csong} added to "$plf"
#			echo "$csong" >> "$plf_tmp"
#			echo "echo '$csong' >> '$plf_tmp'"
#		fi
#		let n++
#		if [ $dry -eq 0 ];then
#			if [ $n -eq 100 ];then
#				mpc random off >/dev/null
#				mpc play >/dev/null
#			fi
#		fi
#		printf "\r$n"
#	done
#	if [ $dry -eq 0 ];then
#		if [ -f "$plf_tmp" ];then
#			tac "$plf" > "$plf_tmp2"
#			echo "tac '$plf' > '$plf_tmp2'"
#			tac "$plf_tmp" >> "$plf_tmp2"
#			echo "tac '$plf_tmp' >> '$plf_tmp2'"
#			tac "$plf_tmp2" > "$plf"
#			echo "tac '$plf_tmp2' > '$plf'"
#			rm "$plf_tmp" "$plf_tmp2"
#		fi
#	fi
#
#	#reorder_album Caparezza
#	#reorder_album "Death Parade"
#	#reorder_album "Kōtarō Nakagawa"
#	#reorder_album Kiznaiver
#	#reorder_album "Bakemonogatari OST"
#	#reorder_album "Bakemonogatari OST [0-9]" #for only the ost and not op/ed
#	#reorder_album "Vivy: Fluorite Eye's Song OST [0-9]"
#	#reorder_album "The Millionaire Detective - Balance: UNLIMITED \(Fugou Keiji: Balance:Unlimited\) OST"
#	#reorder_album "Akudama Drive OST"
#	#reorder_album "Saya no Uta Original Soundtrack"
#	#reorder_album "Wonderful Everyday \(Subarashiki Hibi\) OST"
#	#reorder_album "Euphoria OST"
#	#reorder_album "Menherafflesia"
#	#reorder_album "Kabaneri of the Iron Fortress"
#	#mpc rm "${plf%.*}"
#	#mpc save "${plf%.*}"
#	printf "\n"
#	if [ $dry -eq 0 ];then
#		mpc clear >/dev/null
#		mpc load "$(basename "${plf%.*}")"
#		mpc play >/dev/null
#	fi
#	exit 0
#fi
